plugins() {
    id('java-library')
    id('maven-publish')
    id('net.neoforged.gradle.userdev').version('7.0.173')
    id('idea')
}

tasks.named('wrapper', Wrapper).configure() {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories() {
    maven() {
        url = 'https://maven.pkg.github.com/flowerinsnow-lights-opensource/HideArmour'
        credentials() {
            username = "${System.getenv("GITHUB_USERNAME")}"
            password = "${System.getenv("GITHUB_TOKEN")}"
        }
    }
}

base() {
    archivesName = mod_id
}

java() {
    toolchain() {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Include resources generated by data generators.
sourceSets.main.resources() {
    srcDir('src/generated/resources')
}

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations() {
    runtimeClasspath.extendsFrom(localRuntime)
}

jarJar.enable()

tasks.named('jarJar') {
    from('../LICENSE')
}

dependencies() {
    implementation("net.neoforged:neoforge:${neo_version}")

    compileOnly("cn.flowerinsnow.hidearmour:common:${version_common_module}")
    jarJar("cn.flowerinsnow.hidearmour:common:${version_common_module}")
}

tasks.withType(ProcessResources).configureEach() {
    LinkedHashMap<String, ?> replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties(replaceProperties)

    filesMatching('META-INF/neoforge.mods.toml') {
        expand(replaceProperties)
    }
}

// Include resources generated by data generators.
sourceSets.main.resources() {
    srcDir('src/generated/resources')
}

// Example configuration to allow publishing using the maven-publish plugin
publishing() {
    publications() {
        register('mavenJava', MavenPublication) {
            from(components.java)
        }
    }
    repositories() {
        maven() {
            url("file://${project.projectDir}/repo")
        }
    }
}

tasks.withType(JavaCompile).configureEach() {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea() {
    module() {
        downloadSources = true
        downloadJavadoc = true
    }
}
